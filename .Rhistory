if(length(actors) > 0){
for(i in 1:length(actors)){
movie_data2 <- paste0(movie_data, ";", actors[i])
# Writting the final data in a different file
write(movie_data, file = fileNameActors, append = TRUE)
}
}
}
}else{
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
"NULL;",
"NULL;",
"NULL")
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
}
}
# Pre-processing the movie information to avoid problems with comma
# And adding some extra data
# Load library
library(httr)
# Defining the file name
fileName <- "./data/movie_titles.txt"
fileNameCleaned <- "./data/movie_titles_clean.txt"
fileNameActors <- "./data/movie_with_actors.txt"
# Loading one line per iteration, changing the value and writting the
# result in a new file, source = http://stackoverflow.com/a/28281908
con  <- file(fileName, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
# Using gsub to separate the title from other data per movie
movie_title <- gsub("^([^,]*,[^,]*),", "", oneLine)
movie_data_without_title <- sub("^([^,]*,[^,]*,).*", "\\1", oneLine)
# Replacing comma for semicolon as separator
movie_data_without_title <- gsub(",", ";", movie_data_without_title)
# Adding data about genre, language and country in the movie
# Request execution
requestMovieData <- GET(
"http://www.omdbapi.com/?",
query = list(t = movie_title)
)
# Getting the content in json format
movieDataWeb <- content(requestMovieData, "parsed", encoding = "UTF-8")
if(movieDataWeb$Response == "True"){
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
movieDataWeb$Genre, ";",
movieDataWeb$Language, ";",
movieDataWeb$Country)
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
# Getting actors data and parsing it
if(movieDataWeb$Actors != "N/A"){
actors <- strsplit(movieDataWeb$Actors, ",")[[1]]
# For loop with actors
if(length(actors) > 0){
for(i in 1:length(actors)){
movie_data2 <- paste0(movie_data, ";", actors[i])
# Writting the final data in a different file
write(movie_data, file = fileNameActors, append = TRUE)
}
}
}
}else{
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
"NULL;",
"NULL;",
"NULL")
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
}
}
close(con)
install.packages(xml2)
install.packages("xml2")
# Pre-processing the movie information to avoid problems with comma
# And adding some extra data
# Load library
library(httr)
# Defining the file name
fileName <- "./data/movie_titles.txt"
fileNameCleaned <- "./data/movie_titles_clean.txt"
fileNameActors <- "./data/movie_with_actors.txt"
# Loading one line per iteration, changing the value and writting the
# result in a new file, source = http://stackoverflow.com/a/28281908
con  <- file(fileName, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
# Using gsub to separate the title from other data per movie
movie_title <- gsub("^([^,]*,[^,]*),", "", oneLine)
movie_data_without_title <- sub("^([^,]*,[^,]*,).*", "\\1", oneLine)
# Replacing comma for semicolon as separator
movie_data_without_title <- gsub(",", ";", movie_data_without_title)
# Adding data about genre, language and country in the movie
# Request execution
requestMovieData <- GET(
"http://www.omdbapi.com/?",
query = list(t = movie_title)
)
# Getting the content in json format
movieDataWeb <- content(requestMovieData, "parsed", encoding = "UTF-8")
if(movieDataWeb$Response == "True"){
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
movieDataWeb$Genre, ";",
movieDataWeb$Language, ";",
movieDataWeb$Country)
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
# Getting actors data and parsing it
if(movieDataWeb$Actors != "N/A"){
actors <- strsplit(movieDataWeb$Actors, ",")[[1]]
# For loop with actors
if(length(actors) > 0){
for(i in 1:length(actors)){
movie_data2 <- paste0(movie_data, ";", actors[i])
# Writting the final data in a different file
write(movie_data, file = fileNameActors, append = TRUE)
}
}
}
}else{
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
"NULL;",
"NULL;",
"NULL")
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
}
}
close(con)
# Pre-processing the movie information to avoid problems with comma
# And adding some extra data
# Load library
library(httr)
# Defining the file name
fileName <- "./data/movie_titles.txt"
fileNameCleaned <- "./data/movie_titles_clean.txt"
fileNameActors <- "./data/movie_with_actors.txt"
# Loading one line per iteration, changing the value and writting the
# result in a new file, source = http://stackoverflow.com/a/28281908
con  <- file(fileName, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
# Using gsub to separate the title from other data per movie
movie_title <- gsub("^([^,]*,[^,]*),", "", oneLine)
movie_data_without_title <- sub("^([^,]*,[^,]*,).*", "\\1", oneLine)
# Replacing comma for semicolon as separator
movie_data_without_title <- gsub(",", ";", movie_data_without_title)
# Adding data about genre, language and country in the movie
# Request execution
requestMovieData <- GET(
"http://www.omdbapi.com/?",
query = list(t = movie_title)
)
# Getting the content in json format
movieDataWeb <- content(requestMovieData, "parsed", encoding = "UTF-8")
if(movieDataWeb$Response == "True"){
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
movieDataWeb$Genre, ";",
movieDataWeb$Language, ";",
movieDataWeb$Country)
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
# Getting actors data and parsing it
if(movieDataWeb$Actors != "N/A"){
actors <- strsplit(movieDataWeb$Actors, ",")[[1]]
# For loop with actors
if(length(actors) > 0){
for(i in 1:length(actors)){
movie_data2 <- paste0(movie_data, ";", actors[i])
# Writting the final data in a different file
write(movie_data, file = fileNameActors, append = TRUE)
}
}
}
}else{
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
"NULL;",
"NULL;",
"NULL")
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
}
}
close(con)
# Pre-processing the movie information to avoid problems with comma
# And adding some extra data
# Load library
library(httr)
# Defining the file name
fileName <- "./data/movie_titles.txt"
fileNameCleaned <- "./data/movie_titles_clean.txt"
fileNameActors <- "./data/movie_with_actors.txt"
# Loading one line per iteration, changing the value and writting the
# result in a new file, source = http://stackoverflow.com/a/28281908
con  <- file(fileName, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
# Using gsub to separate the title from other data per movie
movie_title <- gsub("^([^,]*,[^,]*),", "", oneLine)
movie_data_without_title <- sub("^([^,]*,[^,]*,).*", "\\1", oneLine)
# Replacing comma for semicolon as separator
movie_data_without_title <- gsub(",", ";", movie_data_without_title)
# Adding data about genre, language and country in the movie
# Request execution
requestMovieData <- GET(
"http://www.omdbapi.com/?",
query = list(t = movie_title)
)
# Getting the content in json format
movieDataWeb <- content(requestMovieData, "parsed", encoding = "UTF-8")
if(requestMovieData$status_code == 200){
if(movieDataWeb$Response == "True"){
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
movieDataWeb$Genre, ";",
movieDataWeb$Language, ";",
movieDataWeb$Country)
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
# Getting actors data and parsing it
if(movieDataWeb$Actors != "N/A"){
actors <- strsplit(movieDataWeb$Actors, ",")[[1]]
# For loop with actors
if(length(actors) > 0){
for(i in 1:length(actors)){
movie_data2 <- paste0(movie_data, ";", actors[i])
# Writting the final data in a different file
write(movie_data, file = fileNameActors, append = TRUE)
}
}
}
}else{
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
"NULL;",
"NULL;",
"NULL")
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
}
}
}
# Pre-processing the movie information to avoid problems with comma
# And adding some extra data
# Load library
library(httr)
# Defining the file name
fileName <- "./data/movie_titles.txt"
fileNameCleaned <- "./data/movie_titles_clean.txt"
fileNameActors <- "./data/movie_with_actors.txt"
# Loading one line per iteration, changing the value and writting the
# result in a new file, source = http://stackoverflow.com/a/28281908
con  <- file(fileName, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
# Using gsub to separate the title from other data per movie
movie_title <- gsub("^([^,]*,[^,]*),", "", oneLine)
movie_data_without_title <- sub("^([^,]*,[^,]*,).*", "\\1", oneLine)
# Replacing comma for semicolon as separator
movie_data_without_title <- gsub(",", ";", movie_data_without_title)
# Adding data about genre, language and country in the movie
# Request execution
requestMovieData <- GET(
"http://www.omdbapi.com/?",
query = list(t = movie_title)
)
# Getting the content in json format
movieDataWeb <- content(requestMovieData, "parsed", encoding = "UTF-8")
if(requestMovieData$status_code == 200){
if(movieDataWeb$Response == "True"){
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
movieDataWeb$Genre, ";",
movieDataWeb$Language, ";",
movieDataWeb$Country)
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
# Getting actors data and parsing it
if(movieDataWeb$Actors != "N/A"){
actors <- strsplit(movieDataWeb$Actors, ",")[[1]]
# For loop with actors
if(length(actors) > 0){
for(i in 1:length(actors)){
movie_data2 <- paste0(movie_data, ";", actors[i])
# Writting the final data in a different file
write(movie_data2, file = fileNameActors, append = TRUE)
}
}
}
}else{
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
"NULL;",
"NULL;",
"NULL")
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
}
}
}
close(con)
# Pre-processing the movie information to avoid problems with comma
# And adding some extra data
# Load library
library(httr)
# Defining the file name
fileName <- "./data/movie_titles.txt"
fileNameCleaned <- "./data/movie_titles_clean.txt"
fileNameActors <- "./data/movie_with_actors.txt"
# Loading one line per iteration, changing the value and writting the
# result in a new file, source = http://stackoverflow.com/a/28281908
con  <- file(fileName, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
# Using gsub to separate the title from other data per movie
movie_title <- gsub("^([^,]*,[^,]*),", "", oneLine)
movie_data_without_title <- sub("^([^,]*,[^,]*,).*", "\\1", oneLine)
# Replacing comma for semicolon as separator
movie_data_without_title <- gsub(",", ";", movie_data_without_title)
# Adding data about genre, language and country in the movie
# Request execution
requestMovieData <- GET(
"http://www.omdbapi.com/?",
query = list(t = movie_title)
)
# Getting the content in json format
movieDataWeb <- content(requestMovieData, "parsed", encoding = "UTF-8")
if(requestMovieData$status_code == 200){
if(movieDataWeb$Response == "True"){
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
movieDataWeb$Genre, ";",
movieDataWeb$Language, ";",
movieDataWeb$Country)
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
# Getting actors data and parsing it
if(movieDataWeb$Actors != "N/A"){
actors <- strsplit(movieDataWeb$Actors, ",")[[1]]
# For loop with actors
if(length(actors) > 0){
for(i in 1:length(actors)){
movie_data2 <- paste0(movie_data, ";", actors[i])
# Writting the final data in a different file
write(movie_data2, file = fileNameActors, append = TRUE)
}
}
}
}else{
# Join all the data using semicolon
movie_data <- paste0(movie_data_without_title,
movie_title, ";",
"NULL;",
"NULL;",
"NULL")
# Writting the final data in a file
write(movie_data, file = fileNameCleaned, append = TRUE)
}
}
}
source("cleaningDataset.R")
fileNameCleaned <- "./data/movie_titles_clean.txt"
movies <- read.csv2(fileNameCleaned,
header = FALSE, col.names = c("id", "year", "title", "genre", "language", "country"),
colClasses = c("integer", "character", "character", "character", "character", "character"),
comment.char = "", na.strings = "NA")
fileNameCleaned <- "./data/movie_titles_clean.txt"
movies <- read.csv2(fileNameCleaned,
header = FALSE, col.names = c("id", "year", "title", "genre", "language", "country"),
colClasses = c("integer", "character", "character", "character", "character", "character"),
comment.char = "", na.strings = "NA")
languages <- as.factor(movies$language)
str(languages)
str(movies)
country <- as.factor(movies$country)
head(country)
head(languages)
fileNameActors <- "./data/movie_with_actors.txt"
actors <- read.csv2(fileNameActors,
header = FALSE, col.names = c("id", "year", "title", "genre", "language", "country", "actor"),
colClasses = c("integer", "character", "character", "character", "character", "character", "character"),
comment.char = "", na.strings = "NA")
actors <- as.factor(actors$actor)
hist(actors)
hist(as.integer(levels(actors)))
hist(as.numeric(levels(actors)))
hist(levels(actors))
as.numeric(levels(actors))[actors]
head(actors)
str(actors)
levels(actors)
head(levels(actors))
head(levels(actors))[1]
head(levels(actors))[1][1]
head(levels(actors))[[1]]
x <- as.numeric(levels(actors))[actors]
head(x)
tail(x)
x <- as.numeric(table(actors))
head(x)
hist(x)
head(table(actors))
str(actors)
summary(actors)
source("cleaningDataser.R")
source("cleaningDataset.R")
fileNameActors <- "./data/movie_with_actors.txt"
actors <- read.csv2(fileNameActors,
header = FALSE, col.names = c("id", "year", "title", "director", "genre", "language", "country", "actor"),
colClasses = c("integer", "character", "character", "factor","character", "character", "character", "factor"),
comment.char = "", na.strings = "NA")
summary(actors)
actors <- read.csv2(fileNameActors,
header = FALSE, col.names = c("id", "year", "title", "director", "genre", "language", "country", "actor"),
colClasses = c("integer", "character", "character", "factor","character", "character", "character", "factor"),
comment.char = "", na.strings = "N/A")
summary(actors)
head(actors)
str(actors)
fileNameCleaned <- "./data/movie_titles_clean.txt"
fileNameActors <- "./data/movie_with_actors.txt"
# Reading movie information
movies <- read.csv2(fileNameCleaned,
header = FALSE, col.names = c("id", "year", "title", "director",
"genre", "language", "country"),
colClasses = c("integer", "character", "character", "factor",
"character", "character", "character"),
comment.char = "", na.strings = "N/A")
actionMovies <- subset(movies, grepl(genre[1], genre))
nrow(actionMovies)
head(actionMovies)
genres <- c("Action", "Adventure", "Animation", "Biography",
"Comedy", "Crime", "Documentary", "Drama", "Family",
"Fantasy", "Film-Noir", "History", "Horror", "Music",
"Musical", "Mystery", "Romance", "Sci-Fi", "Sport",
"Thriller", "War", "Western")
actionMovies <- subset(movies, grepl(genre[1], genre))
head(actionMovies)
actionMovies <- subset(movies, grepl(genres[1], genre))
head(actionMovies)
NumMoviesPerGenre <- sum(movies$genre = genres)
index<-sapply(1:length(movies$genre),function(x)sum(numbers[1:x]==numbers[x]))
index<-sapply(movies$genre,function(x)sum(grepl(genres[1], genre)))
index<-sapply(movies$genre,function(x)sum(grepl(genres[1], x)))
index
index<-sapply(movies$genre,function(x)nrow(grepl(genres[1], x)))
index
index<-sapply(movies$genre,function(x)sum(grepl(genres[1], genre)))
actionMovies
actionMovies <- subset(movies, grepl(genres, genre))
index<-sapply(genres,function(x)sum(grepl(x, movies$genre)))
index
index<-sapply(genres,function(x)sum(grepl(movies$genre, x)))
index
index<-sapply(genres,function(x)sum(grepl(x, movies$genre)))
hist(index)
index<-sapply(genres,function(x)nrow(grepl(x, movies$genre)))
index
levels(actors$actor)
NumMoviesPerDirector <- sapply(levels(movies$director),function(x)sum(grepl(x, movies$director)))
NumMoviesPerDirector <- sapply(levels(movies$director),function(x)sum(x = movies$director))
NumMoviesPerDirector
head(NumMoviesPerDirector)
tail(NumMoviesPerDirector)
levels(movies$director)
levels(genres)
genres
lvl <- levels(movies$director)
head(lvl)
sapply(lvl,function(x)sum(x = movies$director))
sapply(lvl,function(x)nrows(x = movies$director))
sapply(lvl,function(x)nrow(x = movies$director))
sapply(lvl,function(x)count.fields(x = movies$director))
y <- sapply(lvl,function(x)count.fields(x = as.character(movies$director)))
y <- sapply(lvl,function(x)sum(x = as.character(movies$director)))
y <- table(movies$director)
y
head(y)
order(y)
head(order(y))
y(order(y))
y[order(y),]
library(dplyr)
count(movies$director)
sum(movies$director)
summary(movies$director)
y <- table(movies$director)
head(y)
y <- sort(table(movies$director))
head(y)
y <- sort(table(movies$director), decreasing=TRUE)
head(y)
NumMoviesPerActor <- sort(table(moviesCompleteByActor$actor), decreasing=TRUE)
NumMoviesPerActor <- sort(table(actors$actor), decreasing=TRUE)
head(NumMoviesPerActor)
NumMoviesPerGenre <- order(sapply(genres,function(x)sum(grepl(x, movies$genre))), decreasing=TRUE)
NumMoviesPerGenre
NumMoviesPerGenre <- sapply(genres,function(x)sum(grepl(x, movies$genre)))
NumMoviesPerGenre
